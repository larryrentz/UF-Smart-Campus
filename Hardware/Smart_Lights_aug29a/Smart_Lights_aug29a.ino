#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Smart Lights"
  https://create.arduino.cc/cloud/things/feaca5c1-6b2b-4fed-9b78-a2f7f5fae3f5 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int LED1_MOSFET_STATE;
  int LED2_MOSFET_STATE;
  int LED3_MOSFET_STATE;
  int LED4_MOSFET_STATE;
  int LED1_STATUS;
  int LED2_STATUS;
  int LED3_STATUS;
  int LED4_STATUS;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define LED1_val 34
#define LED2_val 35
#define LED3_val 32
#define LED4_val 33

#define LED1_MOSFET 16
#define LED2_MOSFET 2
#define LED3_MOSFET 4
#define LED4_MOSFET 15

float Vref = 5.0; 

float LED1; 
float LED2; 
float LED3; 
float LED4; 

void setup() {
  // Initialize variables
  pinMode(LED1_val,INPUT);
  pinMode(LED2_val,INPUT);
  pinMode(LED3_val,INPUT);
  pinMode(LED4_val,INPUT);
  
  pinMode(LED1_MOSFET,OUTPUT); 
  pinMode(LED2_MOSFET,OUTPUT);
  pinMode(LED3_MOSFET,OUTPUT);
  pinMode(LED4_MOSFET,OUTPUT);
  
  digitalWrite(LED1_MOSFET,HIGH);
  digitalWrite(LED2_MOSFET,HIGH);
  digitalWrite(LED3_MOSFET,HIGH);
  digitalWrite(LED4_MOSFET,HIGH);
  
  LED1_MOSFET_STATE = 1; 
  LED2_MOSFET_STATE = 1; 
  LED3_MOSFET_STATE = 1; 
  LED4_MOSFET_STATE = 1; 
  
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  LED1 = analogRead(LED1_val);
  LED2 = analogRead(LED2_val);
  LED3 = analogRead(LED3_val);
  LED4 = analogRead(LED4_val);
  
/*    Serial.println(LED1);
   Serial.println(LED2);
    Serial.println(LED3);
     Serial.println(LED4);
     
     Serial.println(' ');
     
  delay(1000);*/
  
  LED1 = (Vref/4095)*LED1;
  LED2 = (Vref/4095)*LED2;
  LED3 = (Vref/4095)*LED3;
  LED4 = (Vref/4095)*LED4;
  
  LED1 = Vref - LED1; 
  LED2 = Vref - LED2; 
  LED3 = Vref - LED3; 
  LED4 = Vref - LED4; 
  
  if((LED1 >= 0) && (LED1 <= 1.95)){
    LED1_STATUS = 1; 
    }
  else{
    LED1_STATUS = 0; 
    }
    
  if((LED2 >= 0) && (LED2 <= 1.95)){
    LED2_STATUS = 1; 
    }
  else{
    LED2_STATUS = 0; 
    }
    
  if((LED3 >= 0) && (LED3 <= 1.95)){
    LED3_STATUS = 1; 
    }
  else{
    LED3_STATUS = 0; 
    }
    
  if((LED4 >= 0) && (LED4 <= 1.95)){
    LED4_STATUS = 1; 
    }
  else{
    LED4_STATUS = 0; 
    }
    
  switch(LED1_STATUS){
    case 0: 
      Serial.println("LED1 is disconnected"); 
      break;
  }
  switch(LED2_STATUS){
    case 0: 
      Serial.println("LED2 is disconnected"); 
      break;
  }
  switch(LED3_STATUS){
    case 0: 
      Serial.println("LED3 is disconnected"); 
      break;
  }
  switch(LED4_STATUS){
    case 0: 
      Serial.println("LED4 is disconnected"); 
      break;
  }
  
  //delay(2000);
}

void onLED1MOSFETSTATEChange() {
  // Do something
  if(LED1_MOSFET_STATE == 1){
    digitalWrite(LED1_MOSFET,HIGH); 
  }
  else{
    digitalWrite(LED1_MOSFET,LOW);
  }
}


void onLED2MOSFETSTATEChange() {
  // Do something
  if(LED2_MOSFET_STATE == 1){
    digitalWrite(LED2_MOSFET,HIGH); 
  }
  else{
    digitalWrite(LED2_MOSFET,LOW);
  }
}


void onLED3MOSFETSTATEChange() {
  // Do something
  if(LED3_MOSFET_STATE == 1){
    digitalWrite(LED3_MOSFET,HIGH); 
  }
  else{
    digitalWrite(LED3_MOSFET,LOW);
  }
}

void onLED4MOSFETSTATEChange() {
  // Do something
  if(LED4_MOSFET_STATE == 1){
    digitalWrite(LED4_MOSFET,HIGH); 
  }
  else{
    digitalWrite(LED4_MOSFET,LOW);
  }
}




