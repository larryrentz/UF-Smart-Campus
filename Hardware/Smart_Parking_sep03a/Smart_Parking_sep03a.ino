#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/edd75e68-8962-476d-a629-78c22c691172 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int SPOT4;
  int SPOT1;
  int SPOT2;
  int SPOT3;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define spot1_val 32
#define spot2_val 33
#define spot3_val 34
#define spot4_val 35

#define red1 27
#define red2 12
#define red3 14
#define red4 13

#define green1 5
#define green2 21
#define green3 19
#define green4 18

int spot1_state;
int spot2_state;
int spot3_state;
int spot4_state;

int car_threshold = 900; 

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //red LED pins initializations
  pinMode(spot1_val, INPUT);
  pinMode(spot2_val, INPUT);
  pinMode(spot3_val, INPUT);
  pinMode(spot4_val, INPUT);
  
  //red LED pins initializations
  pinMode(red1, OUTPUT);
  pinMode(red2, OUTPUT);
  pinMode(red3, OUTPUT);
  pinMode(red4, OUTPUT);

  //green LED pins initializations
  pinMode(green1, OUTPUT);
  pinMode(green2, OUTPUT);
  pinMode(green3, OUTPUT);
  pinMode(green4, OUTPUT);

  spot1_state = 0;
  spot2_state = 0;
  spot3_state = 0;
  spot4_state = 0;
  
  digitalWrite(red1, LOW);
  digitalWrite(red2, LOW);
  digitalWrite(red3, LOW);
  digitalWrite(red4, LOW);

  digitalWrite(green1, HIGH);
  digitalWrite(green2, HIGH);
  digitalWrite(green3, HIGH);
  digitalWrite(green4, HIGH);

}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  spot1_state = analogRead(spot1_val);
  spot2_state = analogRead(spot2_val);
  spot3_state = analogRead(spot3_val);
  spot4_state = analogRead(spot4_val);
  
  Serial.println(spot1_state); 
  Serial.println(spot2_state); 
  Serial.println(spot3_state); 
  Serial.println(spot4_state); 
  
  Serial.println(' ');
  
  delay(2000);

  if (spot1_state <= car_threshold) 
  {
    digitalWrite(red1, HIGH);
    digitalWrite(green1, LOW);
    SPOT1 = 1;
  }
  else{
    digitalWrite(red1, LOW);
    digitalWrite(green1, HIGH);
    SPOT1 = 0;
  }
  
  if (spot2_state <= car_threshold) 
  {
    digitalWrite(red2, HIGH);
    digitalWrite(green2, LOW);
    SPOT2 = 1;
  }
  else{
    digitalWrite(red2, LOW);
    digitalWrite(green2, HIGH);
    SPOT2 = 0;
  }
  
  if (spot3_state <= car_threshold) 
  {
    digitalWrite(red3, HIGH);
    digitalWrite(green3, LOW);
    SPOT3 = 1;
  }
  else{
    digitalWrite(red3, LOW);
    digitalWrite(green3, HIGH);
    SPOT3 = 0;
  }
  
  if (spot4_state <= car_threshold) 
  {
    digitalWrite(red4, HIGH);
    digitalWrite(green4, LOW);
    SPOT4 = 1;
  }
  else{
    digitalWrite(red4, LOW);
    digitalWrite(green4, HIGH);
    SPOT4 = 0;
  }

}

